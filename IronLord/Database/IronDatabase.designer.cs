#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IronLord.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="IronDatabase")]
	public partial class IronDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertDirectory(Directory instance);
    partial void UpdateDirectory(Directory instance);
    partial void DeleteDirectory(Directory instance);
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    partial void InsertFileAction(FileAction instance);
    partial void UpdateFileAction(FileAction instance);
    partial void DeleteFileAction(FileAction instance);
    partial void InsertFileVersion(FileVersion instance);
    partial void UpdateFileVersion(FileVersion instance);
    partial void DeleteFileVersion(FileVersion instance);
    partial void InsertNode(Node instance);
    partial void UpdateNode(Node instance);
    partial void DeleteNode(Node instance);
    #endregion
		
		public IronDatabaseDataContext() : 
				base(global::IronLord.Properties.Settings.Default.IronDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public IronDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IronDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IronDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IronDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Directory> Directories
		{
			get
			{
				return this.GetTable<Directory>();
			}
		}
		
		public System.Data.Linq.Table<File> Files
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<FileAction> FileActions
		{
			get
			{
				return this.GetTable<FileAction>();
			}
		}
		
		public System.Data.Linq.Table<FileNode> FileNodes
		{
			get
			{
				return this.GetTable<FileNode>();
			}
		}
		
		public System.Data.Linq.Table<FileVersion> FileVersions
		{
			get
			{
				return this.GetTable<FileVersion>();
			}
		}
		
		public System.Data.Linq.Table<Node> Nodes
		{
			get
			{
				return this.GetTable<Node>();
			}
		}
		
		public System.Data.Linq.Table<NodeAvailability> NodeAvailabilities
		{
			get
			{
				return this.GetTable<NodeAvailability>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _EMailAddress;
		
		private System.Data.Linq.Binary _PasswordHash;
		
		private long _Quota;
		
		private long _QuotaUsed;
		
		private EntitySet<Directory> _Directories;
		
		private EntitySet<Node> _Nodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnEMailAddressChanging(string value);
    partial void OnEMailAddressChanged();
    partial void OnPasswordHashChanging(System.Data.Linq.Binary value);
    partial void OnPasswordHashChanged();
    partial void OnQuotaChanging(long value);
    partial void OnQuotaChanged();
    partial void OnQuotaUsedChanging(long value);
    partial void OnQuotaUsedChanged();
    #endregion
		
		public User()
		{
			this._Directories = new EntitySet<Directory>(new Action<Directory>(this.attach_Directories), new Action<Directory>(this.detach_Directories));
			this._Nodes = new EntitySet<Node>(new Action<Node>(this.attach_Nodes), new Action<Node>(this.detach_Nodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMailAddress", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EMailAddress
		{
			get
			{
				return this._EMailAddress;
			}
			set
			{
				if ((this._EMailAddress != value))
				{
					this.OnEMailAddressChanging(value);
					this.SendPropertyChanging();
					this._EMailAddress = value;
					this.SendPropertyChanged("EMailAddress");
					this.OnEMailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="Binary(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quota", DbType="BigInt NOT NULL")]
		public long Quota
		{
			get
			{
				return this._Quota;
			}
			set
			{
				if ((this._Quota != value))
				{
					this.OnQuotaChanging(value);
					this.SendPropertyChanging();
					this._Quota = value;
					this.SendPropertyChanged("Quota");
					this.OnQuotaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuotaUsed", DbType="BigInt NOT NULL")]
		public long QuotaUsed
		{
			get
			{
				return this._QuotaUsed;
			}
			set
			{
				if ((this._QuotaUsed != value))
				{
					this.OnQuotaUsedChanging(value);
					this.SendPropertyChanging();
					this._QuotaUsed = value;
					this.SendPropertyChanged("QuotaUsed");
					this.OnQuotaUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Directory", Storage="_Directories", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Directory> Directories
		{
			get
			{
				return this._Directories;
			}
			set
			{
				this._Directories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Node", Storage="_Nodes", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Node> Nodes
		{
			get
			{
				return this._Nodes;
			}
			set
			{
				this._Nodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Directories(Directory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Directories(Directory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Directory")]
	public partial class Directory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _ParentId;
		
		private System.Guid _UserId;
		
		private bool _IsPublic;
		
		private bool _IsVersioned;
		
		private byte _EncryptionLevel;
		
		private byte _AvailabilityLevel;
		
		private EntitySet<Directory> _Directories;
		
		private EntitySet<File> _Files;
		
		private EntityRef<Directory> _Directory1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnParentIdChanging(System.Nullable<System.Guid> value);
    partial void OnParentIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnIsPublicChanging(bool value);
    partial void OnIsPublicChanged();
    partial void OnIsVersionedChanging(bool value);
    partial void OnIsVersionedChanged();
    partial void OnEncryptionLevelChanging(byte value);
    partial void OnEncryptionLevelChanged();
    partial void OnAvailabilityLevelChanging(byte value);
    partial void OnAvailabilityLevelChanged();
    #endregion
		
		public Directory()
		{
			this._Directories = new EntitySet<Directory>(new Action<Directory>(this.attach_Directories), new Action<Directory>(this.detach_Directories));
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			this._Directory1 = default(EntityRef<Directory>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Directory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublic", DbType="Bit NOT NULL")]
		public bool IsPublic
		{
			get
			{
				return this._IsPublic;
			}
			set
			{
				if ((this._IsPublic != value))
				{
					this.OnIsPublicChanging(value);
					this.SendPropertyChanging();
					this._IsPublic = value;
					this.SendPropertyChanged("IsPublic");
					this.OnIsPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVersioned", DbType="Bit NOT NULL")]
		public bool IsVersioned
		{
			get
			{
				return this._IsVersioned;
			}
			set
			{
				if ((this._IsVersioned != value))
				{
					this.OnIsVersionedChanging(value);
					this.SendPropertyChanging();
					this._IsVersioned = value;
					this.SendPropertyChanged("IsVersioned");
					this.OnIsVersionedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EncryptionLevel", DbType="TinyInt NOT NULL")]
		public byte EncryptionLevel
		{
			get
			{
				return this._EncryptionLevel;
			}
			set
			{
				if ((this._EncryptionLevel != value))
				{
					this.OnEncryptionLevelChanging(value);
					this.SendPropertyChanging();
					this._EncryptionLevel = value;
					this.SendPropertyChanged("EncryptionLevel");
					this.OnEncryptionLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailabilityLevel", DbType="TinyInt NOT NULL")]
		public byte AvailabilityLevel
		{
			get
			{
				return this._AvailabilityLevel;
			}
			set
			{
				if ((this._AvailabilityLevel != value))
				{
					this.OnAvailabilityLevelChanging(value);
					this.SendPropertyChanging();
					this._AvailabilityLevel = value;
					this.SendPropertyChanged("AvailabilityLevel");
					this.OnAvailabilityLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directory_Directory", Storage="_Directories", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<Directory> Directories
		{
			get
			{
				return this._Directories;
			}
			set
			{
				this._Directories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directory_File", Storage="_Files", ThisKey="Id", OtherKey="DirectoryId")]
		public EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directory_Directory", Storage="_Directory1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Directory Directory1
		{
			get
			{
				return this._Directory1.Entity;
			}
			set
			{
				Directory previousValue = this._Directory1.Entity;
				if (((previousValue != value) 
							|| (this._Directory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Directory1.Entity = null;
						previousValue.Directories.Remove(this);
					}
					this._Directory1.Entity = value;
					if ((value != null))
					{
						value.Directories.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Directory1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Directory", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Directories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Directories.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Directories(Directory entity)
		{
			this.SendPropertyChanging();
			entity.Directory1 = this;
		}
		
		private void detach_Directories(Directory entity)
		{
			this.SendPropertyChanging();
			entity.Directory1 = null;
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Directory = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Directory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[File]")]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _DirectoryId;
		
		private string _FileName;
		
		private bool _IsLocked;
		
		private EntitySet<FileAction> _FileActions;
		
		private EntitySet<FileVersion> _FileVersions;
		
		private EntityRef<Directory> _Directory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDirectoryIdChanging(System.Guid value);
    partial void OnDirectoryIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnIsLockedChanging(bool value);
    partial void OnIsLockedChanged();
    #endregion
		
		public File()
		{
			this._FileActions = new EntitySet<FileAction>(new Action<FileAction>(this.attach_FileActions), new Action<FileAction>(this.detach_FileActions));
			this._FileVersions = new EntitySet<FileVersion>(new Action<FileVersion>(this.attach_FileVersions), new Action<FileVersion>(this.detach_FileVersions));
			this._Directory = default(EntityRef<Directory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectoryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DirectoryId
		{
			get
			{
				return this._DirectoryId;
			}
			set
			{
				if ((this._DirectoryId != value))
				{
					if (this._Directory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDirectoryIdChanging(value);
					this.SendPropertyChanging();
					this._DirectoryId = value;
					this.SendPropertyChanged("DirectoryId");
					this.OnDirectoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLocked", DbType="Bit NOT NULL")]
		public bool IsLocked
		{
			get
			{
				return this._IsLocked;
			}
			set
			{
				if ((this._IsLocked != value))
				{
					this.OnIsLockedChanging(value);
					this.SendPropertyChanging();
					this._IsLocked = value;
					this.SendPropertyChanged("IsLocked");
					this.OnIsLockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_FileAction", Storage="_FileActions", ThisKey="Id", OtherKey="FileId")]
		public EntitySet<FileAction> FileActions
		{
			get
			{
				return this._FileActions;
			}
			set
			{
				this._FileActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_FileVersion", Storage="_FileVersions", ThisKey="Id", OtherKey="FileId")]
		public EntitySet<FileVersion> FileVersions
		{
			get
			{
				return this._FileVersions;
			}
			set
			{
				this._FileVersions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directory_File", Storage="_Directory", ThisKey="DirectoryId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Directory Directory
		{
			get
			{
				return this._Directory.Entity;
			}
			set
			{
				Directory previousValue = this._Directory.Entity;
				if (((previousValue != value) 
							|| (this._Directory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Directory.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Directory.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._DirectoryId = value.Id;
					}
					else
					{
						this._DirectoryId = default(System.Guid);
					}
					this.SendPropertyChanged("Directory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FileActions(FileAction entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}
		
		private void detach_FileActions(FileAction entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}
		
		private void attach_FileVersions(FileVersion entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}
		
		private void detach_FileVersions(FileVersion entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileAction")]
	public partial class FileAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _FileId;
		
		private int _ActionType;
		
		private EntityRef<File> _File;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnFileIdChanging(System.Guid value);
    partial void OnFileIdChanged();
    partial void OnActionTypeChanging(int value);
    partial void OnActionTypeChanged();
    #endregion
		
		public FileAction()
		{
			this._File = default(EntityRef<File>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FileId
		{
			get
			{
				return this._FileId;
			}
			set
			{
				if ((this._FileId != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIdChanging(value);
					this.SendPropertyChanging();
					this._FileId = value;
					this.SendPropertyChanged("FileId");
					this.OnFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionType", DbType="Int NOT NULL")]
		public int ActionType
		{
			get
			{
				return this._ActionType;
			}
			set
			{
				if ((this._ActionType != value))
				{
					this.OnActionTypeChanging(value);
					this.SendPropertyChanging();
					this._ActionType = value;
					this.SendPropertyChanged("ActionType");
					this.OnActionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_FileAction", Storage="_File", ThisKey="FileId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				File previousValue = this._File.Entity;
				if (((previousValue != value) 
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.FileActions.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.FileActions.Add(this);
						this._FileId = value.Id;
					}
					else
					{
						this._FileId = default(System.Guid);
					}
					this.SendPropertyChanged("File");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileNode")]
	public partial class FileNode
	{
		
		private System.Guid _FileId;
		
		private System.Guid _NodeId;
		
		private bool _IsDeleted;
		
		public FileNode()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FileId
		{
			get
			{
				return this._FileId;
			}
			set
			{
				if ((this._FileId != value))
				{
					this._FileId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid NodeId
		{
			get
			{
				return this._NodeId;
			}
			set
			{
				if ((this._NodeId != value))
				{
					this._NodeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileVersion")]
	public partial class FileVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _FileId;
		
		private long _Fileize;
		
		private long _DeltaSize;
		
		private System.Data.Linq.Binary _FileHash;
		
		private EntityRef<File> _File;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnFileIdChanging(System.Guid value);
    partial void OnFileIdChanged();
    partial void OnFileizeChanging(long value);
    partial void OnFileizeChanged();
    partial void OnDeltaSizeChanging(long value);
    partial void OnDeltaSizeChanged();
    partial void OnFileHashChanging(System.Data.Linq.Binary value);
    partial void OnFileHashChanged();
    #endregion
		
		public FileVersion()
		{
			this._File = default(EntityRef<File>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FileId
		{
			get
			{
				return this._FileId;
			}
			set
			{
				if ((this._FileId != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIdChanging(value);
					this.SendPropertyChanging();
					this._FileId = value;
					this.SendPropertyChanged("FileId");
					this.OnFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fileize", DbType="BigInt NOT NULL")]
		public long Fileize
		{
			get
			{
				return this._Fileize;
			}
			set
			{
				if ((this._Fileize != value))
				{
					this.OnFileizeChanging(value);
					this.SendPropertyChanging();
					this._Fileize = value;
					this.SendPropertyChanged("Fileize");
					this.OnFileizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeltaSize", DbType="BigInt NOT NULL")]
		public long DeltaSize
		{
			get
			{
				return this._DeltaSize;
			}
			set
			{
				if ((this._DeltaSize != value))
				{
					this.OnDeltaSizeChanging(value);
					this.SendPropertyChanging();
					this._DeltaSize = value;
					this.SendPropertyChanged("DeltaSize");
					this.OnDeltaSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileHash", DbType="Binary(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary FileHash
		{
			get
			{
				return this._FileHash;
			}
			set
			{
				if ((this._FileHash != value))
				{
					this.OnFileHashChanging(value);
					this.SendPropertyChanging();
					this._FileHash = value;
					this.SendPropertyChanged("FileHash");
					this.OnFileHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_FileVersion", Storage="_File", ThisKey="FileId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				File previousValue = this._File.Entity;
				if (((previousValue != value) 
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.FileVersions.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.FileVersions.Add(this);
						this._FileId = value.Id;
					}
					else
					{
						this._FileId = default(System.Guid);
					}
					this.SendPropertyChanged("File");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Node")]
	public partial class Node : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _UserId;
		
		private System.Data.Linq.Binary _IpAddress;
		
		private string _Name;
		
		private long _ProvidedQuota;
		
		private long _ProvidedQuotaUsed;
		
		private long _ActionNumber;
		
		private System.Data.Linq.Binary _ActionKeyEncrypt;
		
		private System.Data.Linq.Binary _ActionKeyDecrypt;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnIpAddressChanging(System.Data.Linq.Binary value);
    partial void OnIpAddressChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProvidedQuotaChanging(long value);
    partial void OnProvidedQuotaChanged();
    partial void OnProvidedQuotaUsedChanging(long value);
    partial void OnProvidedQuotaUsedChanged();
    partial void OnActionNumberChanging(long value);
    partial void OnActionNumberChanged();
    partial void OnActionKeyEncryptChanging(System.Data.Linq.Binary value);
    partial void OnActionKeyEncryptChanged();
    partial void OnActionKeyDecryptChanging(System.Data.Linq.Binary value);
    partial void OnActionKeyDecryptChanged();
    #endregion
		
		public Node()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpAddress", DbType="Binary(6)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IpAddress
		{
			get
			{
				return this._IpAddress;
			}
			set
			{
				if ((this._IpAddress != value))
				{
					this.OnIpAddressChanging(value);
					this.SendPropertyChanging();
					this._IpAddress = value;
					this.SendPropertyChanged("IpAddress");
					this.OnIpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvidedQuota", DbType="BigInt NOT NULL")]
		public long ProvidedQuota
		{
			get
			{
				return this._ProvidedQuota;
			}
			set
			{
				if ((this._ProvidedQuota != value))
				{
					this.OnProvidedQuotaChanging(value);
					this.SendPropertyChanging();
					this._ProvidedQuota = value;
					this.SendPropertyChanged("ProvidedQuota");
					this.OnProvidedQuotaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvidedQuotaUsed", DbType="BigInt NOT NULL")]
		public long ProvidedQuotaUsed
		{
			get
			{
				return this._ProvidedQuotaUsed;
			}
			set
			{
				if ((this._ProvidedQuotaUsed != value))
				{
					this.OnProvidedQuotaUsedChanging(value);
					this.SendPropertyChanging();
					this._ProvidedQuotaUsed = value;
					this.SendPropertyChanged("ProvidedQuotaUsed");
					this.OnProvidedQuotaUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionNumber", DbType="BigInt NOT NULL")]
		public long ActionNumber
		{
			get
			{
				return this._ActionNumber;
			}
			set
			{
				if ((this._ActionNumber != value))
				{
					this.OnActionNumberChanging(value);
					this.SendPropertyChanging();
					this._ActionNumber = value;
					this.SendPropertyChanged("ActionNumber");
					this.OnActionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionKeyEncrypt", DbType="Binary(64) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ActionKeyEncrypt
		{
			get
			{
				return this._ActionKeyEncrypt;
			}
			set
			{
				if ((this._ActionKeyEncrypt != value))
				{
					this.OnActionKeyEncryptChanging(value);
					this.SendPropertyChanging();
					this._ActionKeyEncrypt = value;
					this.SendPropertyChanged("ActionKeyEncrypt");
					this.OnActionKeyEncryptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionKeyDecrypt", DbType="Binary(64) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ActionKeyDecrypt
		{
			get
			{
				return this._ActionKeyDecrypt;
			}
			set
			{
				if ((this._ActionKeyDecrypt != value))
				{
					this.OnActionKeyDecryptChanging(value);
					this.SendPropertyChanging();
					this._ActionKeyDecrypt = value;
					this.SendPropertyChanged("ActionKeyDecrypt");
					this.OnActionKeyDecryptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Node", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Nodes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Nodes.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NodeAvailability")]
	public partial class NodeAvailability
	{
		
		private System.Guid _NodeId;
		
		private int _TotalAttempts;
		
		private int _SuccessAttempts;
		
		private System.Nullable<System.DateTime> _LogDate;
		
		public NodeAvailability()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid NodeId
		{
			get
			{
				return this._NodeId;
			}
			set
			{
				if ((this._NodeId != value))
				{
					this._NodeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAttempts", DbType="Int NOT NULL")]
		public int TotalAttempts
		{
			get
			{
				return this._TotalAttempts;
			}
			set
			{
				if ((this._TotalAttempts != value))
				{
					this._TotalAttempts = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuccessAttempts", DbType="Int NOT NULL")]
		public int SuccessAttempts
		{
			get
			{
				return this._SuccessAttempts;
			}
			set
			{
				if ((this._SuccessAttempts != value))
				{
					this._SuccessAttempts = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this._LogDate = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
